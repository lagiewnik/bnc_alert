<!DOCTYPE html>
<html lang="en">

<head>
    <title>Binance Alert Generator</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="/alert.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.6/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="https://code.jquery.com/jquery-1.12.4.min.js"></script>
    <script src="/sorttable.js"></script>
    <script type="text/javascript" src="/tools.js"></script>
</head>

<body>

    <%- include('navbar.ejs') %>
    
    <div class="form-group col-sm-2">
        <select onchange="defaultPrices()" name="currency" id="currency" placeholder="Id"
            class="chosen-select form-control"></select>
    </div>
    <table id="arbpricetable" class="table sortable">
        <thead>
            <tr>
                <th>Symbol</th>
                <th>to USDT</th>
                <th>to BTC</th>
                <th>Value$ after buy BTC</th>
                <th>Diff %</th>
                <th>to ETH</th>
                <th>Value$ after buy ETH</th>
                <th>Diff %</th>
                <th>to BNB</th>
                <th>Value$ after buy BNB</th>
                <th>Diff %</th>
                                
            </tr>
        </thead>
        <tbody></tbody>
    <footer>
    </footer>
</body>
<script>

    var gv_allsymprice = {};
    var rawTicksData = {};
    var alert1 = document.getElementById("myAudio");
    //const allCoinUSD = ["AAVE", "LTC", "DOT", "LSK"]

    $(document).ready(function () {
        getallticks();
        //getallsymbols();
        //defaultdisables();
        //calculateArbitrary(rawTicksData, coins);
        updatesymprices();
        //genalerts();


        function updatesymprices() {
            getallsymbolsprices();
            setTimeout(updatesymprices, 10 * 1000);
        }

        function calculateArbitrary(rawTicksData, coins) {
            ////console.log(rawTicksData)
            // var data = JSON.parse(rawTicksData)
            // console.log(data)
            for (k = 0; k< coins.length; k++) {
                
            }
        }

        function getallsymbolsprices() {
            var ourRequestx = new XMLHttpRequest();
            ourRequestx.open('GET', 'https://api.binance.com/api/v3/ticker/price', true);
            ourRequestx.onload = function () {
                var gv_allsymprice_l = {};
                ourDatax = JSON.parse(ourRequestx.responseText);
                for (k = 0; k < ourDatax.length; k++) {
                    gv_allsymprice_l[ourDatax[k]["symbol"]] = ourDatax[k]["price"];
                }
                gv_allsymprice = gv_allsymprice_l;
            }
            ourRequestx.send();
        }

        

        function genalerts() {
            generatealerts();
            //console.log("alerts checking")
            setTimeout(genalerts, 15 * 1000);
        }

        function generatealerts() {
            $("#dptable > tbody > tr").each(function () {
                var symbol1 = $(this).find('.dpsym').text().replace(/\s+/g, "");
                var symbol = $(this).find('.dpsym').text().replace(/\s+/g, "");
                //var symbol = symbol1.substr(1,symbol1.length);//remove leading spaces
                var alerton = $(this).find('.dpaon').text().trim();
                var currencytype = $(this).find('.dpcurtype').text().trim();
                var alertoptions = $(this).find('.dpcond').text().trim();
                var price1 = parseFloat($(this).find('.dpprice1').text());
                var price2 = parseFloat($(this).find('.dpprice2').text());
               // console.log(symbol + symbol1 + alerton + currencytype + alertoptions + price1 + price2)

                var fp1, fp2, fp;
                if (currencytype == 'USDT') {
                    if (symbol.substr(symbol.length - 4, symbol.length) == 'USDT') {
                        fp1 = gv_allsymprice[symbol];
                        fp2 = 1;
                    }
                    else {
                        fp1 = gv_allsymprice[symbol];
                        fp2 = gv_allsymprice[symbol.substr(symbol.length - 3, symbol.length) + 'USDT'];
                    }
                }
                else {
                    if (symbol.substr(symbol.length - 4, symbol.length) == 'USDT') {
                        fp1 = gv_allsymprice[symbol];
                        fp2 = 1;
                    }
                    else {
                        fp1 = 1;
                        fp2 = gv_allsymprice[symbol.substr(symbol.length - 3, symbol.length) + 'USDT'];
                    }
                }

                fp = fp1 * fp2;


                if (!price2) {
                    if (alertoptions == 'Greater Than') {
                        if (fp >= price1) {
                            alert1.play();
                            alert('Price of ' + symbol + ' is greater than ' + price1 + '. Price is: ' + fp);
                        }
                    }
                    else {
                        if (fp <= price1) {
                            alert1.play();
                            alert('Price of ' + symbol + ' is less than ' + price1);
                        }
                    }

                }
                else {
                    if (alertoptions == 'Inside Channel') {
                        if (fp >= price1 && fp <= price2) {
                            alert1.play();
                            alert('Price of ' + symbol + ' is Inside channel ' + price1 + ' & ' + price2);
                        }
                    }
                    else {
                        if (fp <= price1 || fp >= price2) {
                            alert1.play();
                            alert('Price of ' + symbol + ' is Outside channel ' + price1 + ' & ' + price2);
                        }
                    }

                }

            });
        }

        $(".add-row").click(function () {
            var symbol = $("#currency option:selected").text().trim();
            var alerton = $("#alertOn option:selected").text().trim();
            var currencytype = $("#currencytype option:selected").val().trim();
            var alertoptions = $("#alertoptions option:selected").text().trim();
            var priceusd1 = $("#priceusd1").val();
            var pricebtc1 = $("#pricebtc1").val();
            var priceusd2 = $("#priceusd2").val();
            var pricebtc2 = $("#pricebtc2").val();
            var price1, price2;
            if (currencytype == 'USDT') {
                if (alertoptions == 'Greater Than' || alertoptions == 'Less Than') {
                    price1 = priceusd1;
                    price2 = '';
                }
                else {
                    price1 = priceusd1;
                    price2 = priceusd2;
                }
            }
            else {
                if (alertoptions == 'Greater Than' || alertoptions == 'Less Than') {
                    price1 = pricebtc1;
                    price2 = '';
                }
                else {
                    price1 = pricebtc1;
                    price2 = pricebtc2;
                }
            }
            const trid = Date.now();
            const createEndpoint = "/"
            var markup = "<tr id=" + trid + "><td><input type='checkbox' name='record'></td><td>" + '<span class="dpsym">' + symbol + '</span></td><td><span class="dpaon">' + alerton + '</span></td><td><span class="dpcurtype">' + currencytype + '</span></td><td><span class="dpcond">' + alertoptions + '</span></td><td><span class="dpprice1">' + price1 + '</span></td><td><span class="dpprice2">' + price2 + "</span></td></tr>";
            $("#dptable tbody").append(markup);
            dataToSend = JSON.stringify({ "trid": trid, "symbol": symbol, "alertOn": alerton, "currency": currencytype, "conditional": alertoptions, "price1": price1, "price2": price2, "gotSend": 0 });
            // console.log("datasend create alert:");
            // console.log(dataToSend);
            fetch('/' + trid, {
                method: "POST",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: dataToSend
            }).then((response) => response.json())
                .then((data) => {
                    //console.log(data)
                    window.location.href = data.redirect
                })
                .catch((err) => {
                   // console.log(err)
                })
        });

        // Find and remove selected table rows
        $(".delete-row").click(function () {
            $("#dptable tbody").find('input[name="record"]').each(function () {
                //console.log($(this).parents("tr").attr('id'))
                if ($(this).is(":checked")) {
                    const idDelete = $(this).parents("tr").attr('id')
                    //$(this).parents("tr").remove();
                    const deleteEndpoint = '/' + idDelete
                    fetch(deleteEndpoint, {
                        method: "DELETE"
                    }).then((response) => response.json())
                        .then((data) => {
                            console.log(data)
                            window.location.href = data.redirect
                        })
                        .catch((err) => {
                            console.log(err)
                        })
                }
            });
        });


    });

    function defaultdisables() {
        document.getElementById("pricebtc1").disabled = true;
        document.getElementById("priceusd2").disabled = true;
        document.getElementById("pricebtc2").disabled = true;
    }

    function disableInputs1() {
        var x1 = document.getElementById("alertoptions").value;
        var x2 = document.getElementById("currencytype").value;
        if (x2 == 'USDT') {
            document.getElementById("pricebtc1").disabled = true;
            document.getElementById("priceusd1").disabled = false;
            if (x1 == 'gte' || x1 == 'lte') {
                document.getElementById("pricebtc2").disabled = true;
                document.getElementById("priceusd2").disabled = true;
            }
            else {
                document.getElementById("pricebtc2").disabled = true;
                document.getElementById("priceusd2").disabled = false;
            }

        }
        else {
            document.getElementById("priceusd1").disabled = true;
            document.getElementById("pricebtc1").disabled = false;

            if (x1 == 'gte' || x1 == 'lte') {
                document.getElementById("priceusd2").disabled = true;
                document.getElementById("pricebtc2").disabled = true;
            }
            else {
                document.getElementById("priceusd2").disabled = true;
                document.getElementById("pricebtc2").disabled = false;
            }

        }
    }

    function disableInputs2() {
        var x1 = document.getElementById("alertoptions").value;
        var x2 = document.getElementById("currencytype").value;
        if (x1 == 'gte' || x1 == 'lte') {
            document.getElementById("pricebtc2").disabled = true;
            document.getElementById("priceusd2").disabled = true;
        }
        else {
            if (x2 == 'USDT') {
                document.getElementById("priceusd2").disabled = false;
            }
            else {
                document.getElementById("pricebtc2").disabled = false;
            }
        }
    }
    var filteredPair = ourData.filter(function (entry){
                return regx.test(entry.symbol) & !(regxUP.test(entry.symbol)) & !(regxDOWN.test(entry.symbol))
        })

    function getallticks() {
        var ourRequest1 = new XMLHttpRequest();
        var url = 'https://api.binance.com/api/v3/ticker/price';
        ourRequest1.open('GET', url, true);
        ourRequest1.onload = function () {
            ourData = JSON.parse(ourRequest1.responseText);
            var regx = new RegExp("USDT"+"$");
            var regxUP = new RegExp("UPUSDT"+"$");
            var regxDOWN = new RegExp("DOWNUSDT"+"$");
            var regxETH = new RegExp("ETH$");
            var regxBNB = new RegExp("BNB$");
            var regxBTC = new RegExp("BTC$");

            var allCoinUSD = []
            ourData = ourData.filter(function (entry){
                return (regx.test(entry.symbol) & !(regxUP.test(entry.symbol)) & !(regxDOWN.test(entry.symbol)) || (regxETH.test(entry.symbol)) || (regxBNB.test(entry.symbol)) || (regxBTC.test(entry.symbol)))
            })
            ourData.sort(function (a, b) {
                if (a.symbol < b.symbol) {
                    return -1;
                }
                if (a.symbol > b.symbol) {
                    return 1;
                }
                return 0;
            })

            var dataUSD = ourData.filter(function (entry){
                return (regx.test(entry.symbol))
            })
            dataUSD.map(function(x) {
               allCoinUSD.push(x.symbol.slice(0,-4));
            })
            console.log(ourData)
            //gv_symbols = gv_symbols.concat(ourData);
            //console.log(JSON.stringify(ourData));
            //rawTicksData = ourData;
            var optionsAsString = '';
            //document.getElementById('currentprice').value = ourData[0]["price"];
            for (i = 0; i < allCoinUSD.length; i++) {
                optionsAsString += "<option value='" + allCoinUSD[i] + "'>" + allCoinUSD[i] + "</option>";
            }
            $('select[name="currency"]').append(optionsAsString);
            var btcusdtprice = priceFromPair("BTC","USDT",ourData).price
            var ethusdtprice = priceFromPair("ETH","USDT",ourData).price
            var bnbusdtprice = priceFromPair("BNB","USDT",ourData).price
            for(i = 0; i< allCoinUSD.length; i++) {
                var usdtprice = typeof priceFromPair(allCoinUSD[i],"USDT",ourData) === 'undefined'? "-" : priceFromPair(allCoinUSD[i],"USDT",ourData).price
                var btcprice = typeof priceFromPair(allCoinUSD[i],"BTC",ourData) === 'undefined'? "-" : priceFromPair(allCoinUSD[i],"BTC",ourData).price
                var bnbprice = typeof priceFromPair(allCoinUSD[i],"BNB",ourData) === 'undefined'? "-" : priceFromPair(allCoinUSD[i],"BNB",ourData).price
                var ethprice = typeof priceFromPair(allCoinUSD[i],"ETH",ourData) === 'undefined'? "-" : priceFromPair(allCoinUSD[i],"ETH",ourData).price
                var markup = "<tr id=" + allCoinUSD[i] + ">"+
                    "<td>" + '<span class="dpsym">' + allCoinUSD[i] + '</span></td>' + 
                    "<td>" + '<span class="dpsym">' + usdtprice + '</span></td>' + 
                    "<td>" + '<span class="dpsym">' + btcprice + '</span></td>' +
                    "<td>" + '<span class="dpsym">' + btcprice*btcusdtprice + '</span></td>' +
                    "<td>" + '<span class="dpsym">' + (((btcprice*btcusdtprice) - usdtprice)*100/usdtprice).toFixed(4) + '</span></td>' +
                    "<td>" + '<span class="dpsym">' + ethprice +  '</span></td>' +
                    "<td>" + '<span class="dpsym">' + ethprice * ethusdtprice + '</span></td>' +
                    "<td>" + '<span class="dpsym">' + (((ethprice * ethusdtprice)- usdtprice)*100/usdtprice).toFixed(4) + '</span></td>' +
                    "<td>" + '<span class="dpsym">' + bnbprice + '</span></td>' +
                    "<td>" + '<span class="dpsym">' + bnbprice * bnbusdtprice + '</span></td>' +
                    "<td>" + '<span class="dpsym">' + (((bnbprice * bnbusdtprice)- usdtprice)*100/usdtprice).toFixed(4) + '</span></td></tr>';
                $("#arbpricetable tbody").append(markup);   
                //console.log(markup)
            }

        }
        ourRequest1.send();
        
    }

    function priceFromPair(pairA, pairB, ourData) {
        var symbol = "" + pairA + pairB;
        var symbolData = ourData.filter(x=>x.symbol==symbol)
        console.log(symbolData[0])
        return symbolData[0]

    }

    function getallsymbols() {
        var ourRequest1 = new XMLHttpRequest();
        var url = 'https://api.binance.com/api/v3/ticker/price';
        ourRequest1.open('GET', url, true);
        ourRequest1.onload = function () {
            ourData = JSON.parse(ourRequest1.responseText);
            ourData.sort(function (a, b) {
                if (a.symbol < b.symbol) {
                    return -1;
                }
                if (a.symbol > b.symbol) {
                    return 1;
                }
                return 0;
            }

            )
            //console.log(ourData)
            //gv_symbols = gv_symbols.concat(ourData);
            var optionsAsString = '';
            //document.getElementById('currentprice').value = ourData[0]["price"];
            for (i = 0; i < ourData.length; i++) {
                optionsAsString += "<option value='" + ourData[i]["symbol"] + "'>" + ourData[i]["symbol"] + "</option>";
            }
            $('select[name="currency"]').append(optionsAsString);

        }
        ourRequest1.send();
    }

    function defaultPrices() {
        var sym = document.getElementById("currency").value;
        if (sym.substr(sym.length - 4, sym.length) == 'USDT') {
            var ourRequest1 = new XMLHttpRequest();
            var url = 'https://api.binance.com/api/v3/ticker/price?symbol=' + sym;
            ourRequest1.open('GET', url, true);
            ourRequest1.onload = function () {
                ourData = JSON.parse(ourRequest1.responseText);
                document.getElementById("priceusd1").value = ourData["price"];
                document.getElementById("pricebtc1").value = '';

            }
            ourRequest1.send();
        }

        if (sym.substr(sym.length - 3, sym.length) == 'BTC') {
            var ourRequest1 = new XMLHttpRequest();
            var url = 'https://api.binance.com/api/v3/ticker/price?symbol=' + sym;
            var np, up;
            ourRequest1.open('GET', url, true);
            ourRequest1.onload = function () {
                ourData = JSON.parse(ourRequest1.responseText);
                document.getElementById("pricebtc1").value = ourData["price"];
                np = ourData["price"];

                //Call Second REST API
                var ourRequest2 = new XMLHttpRequest();
                ourRequest2.open('GET', 'https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT', true);
                ourRequest2.onload = function () {
                    ourData2 = JSON.parse(ourRequest2.responseText);
                    document.getElementById("priceusd1").value = np * ourData2["price"];
                }
                ourRequest2.send();
            }
            ourRequest1.send();
        }

        if (sym.substr(sym.length - 3, sym.length) == 'ETH') {
            var ourRequest1 = new XMLHttpRequest();
            var url = 'https://api.binance.com/api/v3/ticker/price?symbol=' + sym;
            var np, up;
            ourRequest1.open('GET', url, true);
            ourRequest1.onload = function () {
                ourData = JSON.parse(ourRequest1.responseText);
                document.getElementById("pricebtc1").value = ourData["price"];
                np = ourData["price"];

                //Call Second REST API
                var ourRequest2 = new XMLHttpRequest();
                ourRequest2.open('GET', 'https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT', true);
                ourRequest2.onload = function () {
                    ourData2 = JSON.parse(ourRequest2.responseText);
                    document.getElementById("priceusd1").value = np * ourData2["price"];
                }
                ourRequest2.send();
            }
            ourRequest1.send();
        }

        if (sym.substr(sym.length - 3, sym.length) == 'BNB') {
            var ourRequest1 = new XMLHttpRequest();
            var url = 'https://api.binance.com/api/v3/ticker/price?symbol=' + sym;
            var np, up;
            ourRequest1.open('GET', url, true);
            ourRequest1.onload = function () {
                ourData = JSON.parse(ourRequest1.responseText);
                document.getElementById("pricebtc1").value = ourData["price"];
                np = ourData["price"];

                //Call Second REST API
                var ourRequest2 = new XMLHttpRequest();
                ourRequest2.open('GET', 'https://api.binance.com/api/v3/ticker/price?symbol=BNBUSDT', true);
                ourRequest2.onload = function () {
                    ourData2 = JSON.parse(ourRequest2.responseText);
                    document.getElementById("priceusd1").value = np * ourData2["price"];
                }
                ourRequest2.send();
            }
            ourRequest1.send();
        }
    }

</script>

</html>